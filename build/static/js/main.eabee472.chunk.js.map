{"version":3,"sources":["serviceWorker.js","apis/Jsonplaceholder.js","components/cardview/Card.js","components/cardview/CardList.js","components/searchbox/SearchBox.js","components/Header.js","components/widgets/Clock.js","components/Footer.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","axios","create","baseURL","params","Card","monster","className","alt","src","id","name","email","CardList","props","monsters","map","key","SearchBox","onSearchChange","type","placeholder","onChange","Header","Clock","state","time","Date","toLocaleTimeString","setInterval","setState","this","React","Component","Footer","App","searchField","onSearchChangeHandler","event","target","value","Jsonplaceholder","get","then","response","data","filteredMonsters","filter","toLowerCase","includes","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2RAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,qDChBSC,E,OAAAA,EAAMC,OAAO,CAC1BC,QAAS,uCACTC,OAAQ,KCQKC,G,MARF,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACX,yBAAKC,UAAU,kBACb,yBAAKC,IAAI,OAAOC,IAAG,+BAA0BH,EAAQI,GAAlC,4BACnB,gCAAMJ,EAAQK,KAAd,KACA,+BAAKL,EAAQM,MAAb,QCKWC,EARE,SAACC,GAAD,OACf,yBAAKP,UAAU,aACXO,EAAMC,SAASC,IAAI,SAAAV,GAAO,OAC1B,kBAAC,EAAD,CAAMW,IAAKX,EAAQI,GAAIJ,QAASA,QCIvBY,G,MARG,SAAC,GAAD,IAAGC,EAAH,EAAGA,eAAH,OAChB,2BACEZ,UAAU,aACVa,KAAK,SACLC,YAAY,uBACZC,SAAUH,MCKCI,EAVA,WAEb,OACE,yBAAKhB,UAAU,UACb,4BAHY,mCAIZ,+BCgBSiB,E,2MArBXC,MAAQ,CACJC,MAAM,IAAIC,MAAOC,sB,mFAEA,IAAD,OAClBC,YAAY,WACN,EAAKC,SAAS,CACVJ,MAAM,IAAIC,MAAOC,wBAEtB,O,+BAGH,OACI,yBAAKrB,UAAU,QACb,yBAAKA,UAAU,YACb,qDAA2BwB,KAAKN,MAAMC,Y,GAflCM,IAAMC,WCYXC,EATA,WACb,OACE,yBAAK3B,UAAU,QACb,2EACA,kBAAC,EAAD,QCmCS4B,G,iNAjCbV,MAAQ,CACNV,SAAU,GACVqB,YAAa,I,EAUfC,sBAAwB,SAAAC,GACtB,EAAKR,SAAS,CAAEM,YAAaE,EAAMC,OAAOC,S,mFARvB,IAAD,OAClBC,EAAgBC,IAAI,UACnBC,KAAM,SAAAC,GACL,EAAKd,SAAU,CAAEf,SAAU6B,EAASC,W,+BAQ9B,IAAD,EAC2Bd,KAAKN,MAA/BV,EADD,EACCA,SAAUqB,EADX,EACWA,YACZU,EAAmB/B,EAASgC,OAAO,SAAAzC,GAAO,OAC9CA,EAAQK,KAAKqC,cAAcC,SAASb,EAAYY,iBAGlD,OACE,yBAAKzC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWY,eAAgBY,KAAKM,wBAChC,kBAAC,EAAD,CAAUtB,SAAU+B,IACpB,kBAAC,EAAD,W,GA5BUd,IAAMC,YCJxBiB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,ST0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMb,KAAK,SAAAc,GACjCA,EAAaC,iB","file":"static/js/main.eabee472.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import axios from 'axios';\r\n\r\nexport default axios.create({\r\n  baseURL: 'https://jsonplaceholder.typicode.com',\r\n  params: {\r\n  }\r\n});\r\n","import React from 'react';\r\n\r\nimport './style.css';\r\n\r\nconst Card = ({ monster }) => (\r\n  <div className='card-container'>\r\n    <img alt='user' src={`https://robohash.org/${monster.id}?set=set2&size=180x180`} />\r\n    <h2> {monster.name} </h2>\r\n    <p> {monster.email} </p>\r\n  </div>\r\n);\r\n\r\nexport default Card;\r\n","import React from 'react';\r\n\r\nimport Card from './Card';\r\nimport './style.css';\r\n\r\nconst CardList = (props) => (\r\n  <div className='card-list'>\r\n    { props.monsters.map(monster => (\r\n      <Card key={monster.id} monster={monster} />\r\n    ))}\r\n  </div>\r\n);\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nimport './searchbox.css';\r\n\r\nconst SearchBox = ({ onSearchChange }) =>\r\n  <input\r\n    className='search-box'\r\n    type='search'\r\n    placeholder='search your monsters'\r\n    onChange={onSearchChange}\r\n  />;\r\n\r\nexport default SearchBox;\r\n","// ./components/Header.js\r\nimport React from 'react';\r\n\r\n// functional component\r\nconst Header = () => {\r\n  const welcome = 'React-Search-Card App from Here';\r\n  return (\r\n    <div className=\"footer\">\r\n      <h1>{welcome}</h1>\r\n      <hr />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","// components/widgets/Clock.js\r\nimport React from 'react';\r\n\r\nclass Clock extends React.Component {\r\n    state = {\r\n        time: new Date().toLocaleTimeString()\r\n    }\r\n    componentDidMount() {\r\n      setInterval(() => {\r\n            this.setState({\r\n                time: new Date().toLocaleTimeString()\r\n            });\r\n        }, 1000)\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"my-3\">\r\n              <div className=\"bg-light\">\r\n                <h6>Current local time is {this.state.time}</h6>\r\n              </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Clock;\r\n","// ./components/Footer.js\r\nimport React from 'react';\r\n\r\nimport Clock from './widgets/Clock';\r\n\r\n// functional component\r\nconst Footer = () => {\r\n  return (\r\n    <div className=\"my-4\">\r\n      <p>Last updated by MountKingX on September 2019</p>\r\n      <Clock />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React from 'react';\n\nimport Jsonplaceholder from './apis/Jsonplaceholder';\nimport CardList from './components/cardview/CardList';\nimport SearchBox from './components/searchbox/SearchBox';\n\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport './App.css';\n\n// index.html use semantic ui instead of bootstrap4\nclass App extends React.Component {\n  state = {\n    monsters: [],\n    searchField: '',\n  }\n\n  componentDidMount() {\n    Jsonplaceholder.get('/users')\n    .then( response => {\n      this.setState( { monsters: response.data });\n    });\n  }\n\n  onSearchChangeHandler = event => {\n    this.setState({ searchField: event.target.value });\n  };\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className='App'>\n        <Header />\n        <SearchBox onSearchChange={this.onSearchChangeHandler} />\n        <CardList monsters={filteredMonsters} />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}