{"version":3,"sources":["serviceWorker.js","components/Project.js","containers/MainPage.js","components/Header.js","components/widgets/Clock.js","components/Footer.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Project","id","name","keywords","description","isFinished","keywordsList","map","word","MainPage","state","projects","this","setState","Projects","each","htmlFor","type","React","Component","Header","className","Clock","time","Date","toLocaleTimeString","setInterval","Footer","App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4MAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6CCHSC,EAbC,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,GAAIC,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,SACrBC,EADgD,EAAjBC,WACJ,kBAAoB,yBAE/CC,EAAe,IADTH,EAASI,IAAI,SAAAC,GAAI,OAAIA,EAAO,KACP,IACjC,OACE,yBAAKP,GAAIA,GACP,4BAAKC,GACL,2BAAII,GACJ,2BAAIF,KC+CKK,E,2MApDbC,MAAQ,CACNC,SAAU,I,mFAIVC,KAAKC,SAAS,CACZF,SAAS,CACP,CACEV,GAAI,EACJC,KAAM,KACNC,SAAU,CAAC,MAAO,OAClBE,YAAY,GAEd,CACEJ,GAAI,EACJC,KAAM,KACNC,SAAU,CAAC,MAAO,MAAO,OACzBE,YAAY,Q,+BAOlB,IAAMS,EAAWF,KAAKF,MAAMC,SAASJ,IACnC,SAAAQ,GAAI,OACF,kBAAC,EAAD,CACEd,GAAIc,EAAKd,GACTC,KAAMa,EAAKb,KACXC,SAAUY,EAAKZ,SACfE,WAAYU,EAAKV,eAIvB,OACE,6BACE,qDACCS,EACD,yBAAKb,GAAG,aACN,2BAAOe,QAAQ,SAAf,gBACA,2BAAOC,KAAK,OAAOhB,GAAG,QAAQC,KAAK,cACnC,6BACA,2BAAOc,QAAQ,SAAf,eACA,2BAAOC,KAAK,OAAOhB,GAAG,QAAQC,KAAK,aACnC,6BAAM,8BAER,kC,GA/CegB,IAAMC,WCUdC,EAVA,WAEb,OACE,yBAAKC,UAAU,UACb,4BAHY,8BAIZ,+BCgBSC,E,2MArBXZ,MAAQ,CACJa,MAAM,IAAIC,MAAOC,sB,mFAEA,IAAD,OAClBC,YAAY,WACN,EAAKb,SAAS,CACVU,MAAM,IAAIC,MAAOC,wBAEtB,O,+BAGH,OACI,yBAAKJ,UAAU,QACb,uBAAGA,UAAU,YAAb,yBACyBT,KAAKF,MAAMa,W,GAf9BL,IAAMC,WCYXQ,EATA,WACb,OACE,yBAAKN,UAAU,UACb,mEACA,kBAAC,EAAD,QCQSO,G,MAVH,WACV,OACE,yBAAKP,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCNNQ,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SP0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.5ba79249.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\nconst Project = ( {id, name, keywords, isFinished} ) => {\r\n  const description = isFinished ? 'Finished Alreay' : 'Project in progressing';\r\n  const str = keywords.map(word => word + '');\r\n  const keywordsList = '[' + str + ']';\r\n  return (\r\n    <div id={id}>\r\n      <h3>{name}</h3>\r\n      <p>{keywordsList}</p>\r\n      <p>{description}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Project;\r\n","import React from 'react';\r\n\r\nimport Project from '../components/Project';\r\n\r\nclass MainPage extends React.Component {\r\n  state = {\r\n    projects: [],\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      projects:[\r\n        {\r\n          id: 1,\r\n          name: \"p1\",\r\n          keywords: ['k11', 'k12'],\r\n          isFinished: false\r\n        },\r\n        {\r\n          id: 2,\r\n          name: \"p2\",\r\n          keywords: ['k21', 'k22', 'k23'],\r\n          isFinished: true\r\n        }\r\n      ]\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const Projects = this.state.projects.map(\r\n      each =>\r\n        <Project\r\n          id={each.id}\r\n          name={each.name}\r\n          keywords={each.keywords}\r\n          isFinished={each.isFinished}\r\n        />\r\n    );\r\n\r\n    return (\r\n      <div>\r\n        <h2>This is the Main Page</h2>\r\n        {Projects}\r\n        <div id=\"main-form\">\r\n          <label htmlFor=\"fname\">First Name: </label>\r\n          <input type=\"text\" id=\"fname\" name=\"firstName\"/>\r\n          <br />\r\n          <label htmlFor=\"lname\">Last Name: </label>\r\n          <input type=\"text\" id=\"lname\" name=\"lastName\"/>\r\n          <br /><br />\r\n        </div>\r\n        <hr />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MainPage;\r\n","// ./components/Header.js\r\nimport React from 'react';\r\n\r\n// functional component\r\nconst Header = () => {\r\n  const welcome = 'Game Start from Here - App';\r\n  return (\r\n    <div className=\"footer\">\r\n      <h1>{welcome}</h1>\r\n      <hr />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","// components/widgets/Clock.js\r\nimport React from 'react';\r\n\r\nclass Clock extends React.Component {\r\n    state = {\r\n        time: new Date().toLocaleTimeString()\r\n    }\r\n    componentDidMount() {\r\n      setInterval(() => {\r\n            this.setState({\r\n                time: new Date().toLocaleTimeString()\r\n            });\r\n        }, 1000)\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"my-3\">\r\n              <p className=\"bg-light\">\r\n                Current local time is {this.state.time}\r\n              </p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Clock;\r\n","// ./components/Footer.js\r\nimport React from 'react';\r\n\r\nimport Clock from './widgets/Clock';\r\n\r\n// functional component\r\nconst Footer = () => {\r\n  return (\r\n    <div className=\"footer\">\r\n      <p>Updated by MountKingX on August 2019</p>\r\n      <Clock />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React from 'react';\n\nimport MainPage from './containers/MainPage';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport './App.css';\n\n// index.heml use semantic ui instead of bootstrap4\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Header />\n      <MainPage />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}